/* Michelle Luo
 * Cmdr. Schenk
 * October 19th
 * AP CSA
 */


//Imports 
package luo.seven;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.regex.Matcher; 
import java.util.Random;
import java.io.BufferedReader;
import java.io.FileReader;

//Main Method
public class Main{
    public static void main(String args[])throws Exception{
        
        //clear screen
        System.out.print("\033[H\033[2J");
        System.out.flush();
        //Variables initialization
        int index = 0;
        int xPos = 11;
        int yPos = 2;
        int potentialYPos = 0;
        int potentialXpos = 0;
        boolean gameLoop = true;
        Random rand = new Random();
        //ArrayList and Array initialization
        Coordsys[][] CoordsysArray = new Coordsys[25][25];
        BufferedReader reader = new BufferedReader(new FileReader("src/luo/seven/coordsys.csv"));
        //ArrayList and Array initialization
        String line = reader.readLine();
        String[] fields = line.split(",");
        CoordsysArray[Integer.parseInt(fields[0])][Integer.parseInt(fields[1])] = new Coordsys(Integer.parseInt(fields[0]), Integer.parseInt(fields[1]), Boolean.parseBoolean(fields[2]), Boolean.parseBoolean(fields[3]), Boolean.parseBoolean(fields[4]), Boolean.parseBoolean(fields[5]), fields[6], Integer.parseInt(fields[7]), Integer.parseInt(fields[8]), Integer.parseInt(fields[9]), fields[10], fields[11], Boolean.parseBoolean(fields[12]));
        while( line != null) {
            // read the next line
            try {
                 line = reader.readLine();
                fields = line.split(",");
                CoordsysArray[Integer.parseInt(fields[0])][Integer.parseInt(fields[1])] = new Coordsys(Integer.parseInt(fields[0]), Integer.parseInt(fields[1]), Boolean.parseBoolean(fields[2]), Boolean.parseBoolean(fields[3]), Boolean.parseBoolean(fields[4]), Boolean.parseBoolean(fields[5]), fields[6], Integer.parseInt(fields[7]), Integer.parseInt(fields[8]), Integer.parseInt(fields[9]), fields[10], fields[11], Boolean.parseBoolean(fields[12]));
            } catch (Exception e) {
                continue;
            }
        }
        reader.close();
        //create arraylists for inventory and items
        ArrayList<Item> inventory = new ArrayList<Item>();
        ArrayList<Item> allItems = new ArrayList<Item>();
        //ITEM CALL
        Item nullItem = new Item(0);
        Item mints = new Item(1, "MINTS", "There is a pack of MINTS littered on the ground.", OnInventory.heldByCharacter, 0);
        Item painting = new Item(2, "PAINTING", "A classical PAINTING lies forlornly on the ground.", OnInventory.onGround, 0);
        Item sword = new Item(3, "SWORD", "An anmagical SWORD is stuck in the ground.", OnInventory.onGround, 0);
        Item sack = new Item(4, "SACK", "A lone SACK lies on the ground.", OnInventory.onGround, 0);
        Item armor = new Item(5, "ARMOR", "ARMOR lies on the road, forgotten.", OnInventory.onGround, 0);
        Item key = new Item(6, "KEY", "A KEY lies curiously on the ground", OnInventory.onGround, 0);
        Item gold = new Item(7, "GOLD", "A heavy chunk of GOLD is on the ground.", OnInventory.onGround, 0);
        Item flippers = new Item(8, "FLIPPERS", "swimming FLIPPERS on the ground!!!!", OnInventory.onGround, 0);
        Item token = new Item(9, "TOKEN", "An engraved TOKEN on the ground!!!!", OnInventory.onGround, 0);
        Item bucket = new Item(10, "BUCKET", "A BUCKET sits right there... very lonely.", OnInventory.onGround, 0);
        Item runes = new Item(11, "RUNES", "Some Old RUNES are scattered on the ground", OnInventory.onGround, 0);
        Item coin1 = new Item(12, "COIN", "A momentous treasure of a single COIN is on the ground", OnInventory.onGround, 0);
        Item coin2 = new Item(13, "COIN", "A momentous treasure of a single COIN is on the ground", OnInventory.onGround, 0);
        Item coin3 = new Item(14, "COIN", "A momentous treasure of a single COIN is on the ground", OnInventory.onGround, 0);
        Item torch = new Item(15, "TORCH", "a TORCH is implanted in the ground...", OnInventory.heldByCharacter, 0);

        
        //add items to the list of all items
        allItems.add(nullItem);
        allItems.add(mints);
        allItems.add(painting);
        allItems.add(sword);
        allItems.add(sack);
        allItems.add(armor);
        allItems.add(key);
        allItems.add(gold);
        allItems.add(flippers);
        allItems.add(token);
        allItems.add(bucket);
        allItems.add(runes);
        allItems.add(coin1);
        allItems.add(coin2);
        allItems.add(coin3);
        //place items at coordinates
        //CoordsysArray[24][6] = new Coordsys(1);
        // CoordsysArray[5][4] = new Coordsys(2);
        // CoordsysArray[19][20] = new Coordsys(3);
        // CoordsysArray[4][12] = new Coordsys(4);
        // CoordsysArray[20][13] = new Coordsys(5);
        // CoordsysArray[20][15] = new Coordsys(6);
        // CoordsysArray[4][4] = new Coordsys(7);
        // CoordsysArray[17][18] = new Coordsys(8);
        // CoordsysArray[15][15] = new Coordsys(9);
        // CoordsysArray[21][5] = new Coordsys(10);
        // CoordsysArray[18][5] = new Coordsys(11);
        // CoordsysArray[15][9] = new Coordsys(12);
        // CoordsysArray[16][9] = new Coordsys(13);
        // CoordsysArray[16][9] = new Coordsys(14);
        // CoordsysArray[0][5] = new Coordsys(15);
        // CoordsysArray[0][5] = new Coordsys(3);
        Character nullCharacter = new Character(0, null, null, 0);
        Character statue = new Character(1, "IMPOSING STATUE", "There is an IMPOSING STATUE looking down at you...", 11);
        Character dragonKing = new Character(2, "DRAGONKING", "the DRAGONKING opens its mouth... to eat your face or breathe fire?", 1);
        Character artCollector = new Character(3, "ART COLLECTOR", "An ART COLLECTOR stands in front of the road to beyond.", 2);
        Character nowhere = new Character(4, "NOWHERE the GOD", "NOWHERE the GOD opens his eyes, demanding payment and sacrifices...", 4);
        Character ferryman = new Character(5, "FERRYMAN", "A FERRYMAN stands on his boat waiting for clients to take across the river...", 9);
        Character rabbit = new Character(6, "RABID RABBIT", "A RABID RABBIT stands before you with a cutting glare...", 3);
        Character muttrUker = new Character(7, "muttrUker", "a dragon named MUTTRUKER stands before you...", 1);
        Character python = new Character(8, "PYTHON", "a large poisonous PYTHON stares back at you with beady eyes...", 10);
        Character vendingMachine = new Character(9, "VENDING MACHINE", "a large VENDING MACHINE stands right there...", 12);

        ArrayList<Character> allCharacters = new ArrayList<Character>();
        allCharacters.add(nullCharacter);
        allCharacters.add(statue);
        allCharacters.add(dragonKing);
        allCharacters.add(artCollector);
        allCharacters.add(nowhere);
        allCharacters.add(ferryman);
        allCharacters.add(rabbit);
        allCharacters.add(muttrUker);
        allCharacters.add(python);
        allCharacters.add(vendingMachine);


        CoordsysArray[7][6].setCharacterId(1);
        CoordsysArray[5][6].setCharacterId(2);
        CoordsysArray[5][10].setCharacterId(3);
        CoordsysArray[2][23].setCharacterId(4);
        CoordsysArray[9][18].setCharacterId(5);
        CoordsysArray[19][3].setCharacterId(6);
        CoordsysArray[20][5].setCharacterId(7);
        CoordsysArray[23][17].setCharacterId(8);
        CoordsysArray[23][18].setCharacterId(8);
        CoordsysArray[24][17].setCharacterId(8);
        CoordsysArray[24][18].setCharacterId(8);
        CoordsysArray[24][6].setCharacterId(9);
        //Initial prompt
        String promptForCoord = "You are standing in front of the edge of a cliff.";
        // CoordsysArray[xPos][yPos].getGeneralLocation()
        Scanner userInputScanner = new Scanner(System.in);
        Pattern pattern;
        Matcher matcher;
        String userInputParsing[];
        String userInput;

        // do while loop for user input
        do{
            //Print out the coordinate prompt
            System.out.println("\033[1;31m" + promptForCoord + "\u001B[0m");

            if (CoordsysArray[xPos][yPos + 1].isAccessibleFromSouth() == true){
                System.out.print(CoordsysArray[xPos][yPos + 1].getUserLookPrompt() + " to the north.");
            }if (CoordsysArray[xPos][yPos - 1].isAccessibleFromNorth() == true){
                System.out.print(CoordsysArray[xPos][yPos - 1].getUserLookPrompt() + " to the south.");
            }if (CoordsysArray[xPos + 1][yPos].isAccessibleFromWest() == true){
                System.out.print(CoordsysArray[xPos + 1][yPos].getUserLookPrompt() + " to the east.");
            }if (CoordsysArray[xPos -1][yPos].isAccessibleFromEast() == true){
                System.out.print(CoordsysArray[xPos - 1][yPos].getUserLookPrompt() + " to the west.");
            }
            System.out.println();
            //get the item id for the coordinate
            index = CoordsysArray[xPos][yPos].getItemId();
            // Print out an item prompt if the item exists at that coordinate
            if (index != 0){
                System.out.println(allItems.get(index).getItemOnGroundPrompt());
            }
            index = CoordsysArray[xPos][yPos].getCharacterId();
            if (index != 0){
                System.out.println(allCharacters.get(index).getCharacterPrompt());
            }
            // developer coordinates
            // System.out.println("(" + xPos + ", " + yPos + ")");

            //user INPUT scanner
            System.out.print("\033[1;33m" + ">>> " + "\u001B[0m");
            userInput = userInputScanner.nextLine().toLowerCase();
            userInputParsing = userInput.split(" ");
            //Switch statements to parse userInput
            switch (userInputParsing[0]) {
                //north
                case "north":
                case "n":
                    potentialYPos = yPos + 1;
                    if ((potentialYPos <= 24) && (CoordsysArray[xPos][potentialYPos].isAccessibleFromSouth() == true)){
                        yPos += 1;
                    }
                    else{
                        System.out.println("Can't go there!");
                    }
                    break;
                //south
                case "south":
                case "s":
                    potentialYPos = yPos - 1;
                    if ((potentialYPos >= 0) && (CoordsysArray[xPos][potentialYPos].isAccessibleFromNorth() == true)){
                        yPos -= 1;
                    }
                    else{
                        System.out.println("Can't go there!!!!! Why do you bump into walls so much anyways... its almost like this is a only-text adventure game...");
                    }
                    break;
                //east
                case "east":
                case "e":
                    potentialXpos = xPos + 1;
                    if ((potentialXpos <= 24) && (CoordsysArray[potentialXpos][yPos].isAccessibleFromWest() == true)){
                        xPos += 1;
                    }
                    else{
                        System.out.println("Can't go there!");
                    }
                    break;
                //west
                case "west":
                case "w":
                    potentialXpos = xPos - 1;
                    if ((potentialXpos >= 0) && (CoordsysArray[potentialXpos][yPos].isAccessibleFromEast() == true)){
                        xPos -= 1;
                    }
                    else{
                        System.out.println("Can't go there!");
                    }
                    break;
                //take the item
                case "t":
                case "take":
                case "pick up":
                case "PICK UP ITEM":
                    index = CoordsysArray[xPos][yPos].getItemId();
                    //pick up item and add to inventory arrray list
                    if ((index != 0) && (inventory.size() < 8)){
                        if (index == 7){
                            if (inventory.contains(sack)) {
                                sack.setThingsContainedWithin(sack.getThingsContainedWithin() + 1);
                            } else {
                                System.out.println("no SACK to pick up the gold with...");
                            }
                        }
                        else{
                        inventory.add(allItems.get(index));
                        System.out.println("Picked up " + allItems.get(index).getItemName() + ".");
                        CoordsysArray[xPos][yPos].setItemId(0);
                        }
                    }else if (inventory.size() >= 8){
                        System.out.println("Inventory is too full to hold more...");
                    }else{
                        System.out.println("no items here....");
                    }
                    break;
                //drop the item, but you only said drop, and not which item
                case "d":
                case "drop":
                    try {
                        // System.out.println(userInputParsing);
                        pattern = Pattern.compile("(mints)|(painting)|(sword)|(sack)|(armor)|(key)|(gold)|(flippers)|(token)|(bucket)|(runes)|(coin)|(coin)|(coin)|(torch)", Pattern.CASE_INSENSITIVE);
                        matcher = pattern.matcher(userInputParsing[1]);
                        matcher.find();
                        // matcher.find() == true
                        // userInputParsing[1].equals("mints")
                        boolean containsItem = false;
                        boolean haventMatchedYet = true;
                        for (int i = 0; (i < 15) && (haventMatchedYet==true); i++) {
                            if (userInputParsing[1].equalsIgnoreCase(matcher.group(i))){
                                for (Item item : allItems) {
                                    if (item.getItemName().equals(matcher.group(i).toUpperCase())){
                                        containsItem = true;
                                        if (CoordsysArray[xPos][yPos].getItemId() != 0){
                                            System.out.println("Can't drop! Theres already an item there....");
                                        }
                                        else{
                                        inventory.remove(item);
                                        CoordsysArray[xPos][yPos].setItemId(item.getItemId());
                                        System.out.println("Dropped " + item.getItemName() + ".");
                                        haventMatchedYet = false;
                                        }
                                    }
                                }
                                if (containsItem == false){
                                    System.out.println("You can't drop something you don't have....");
                                }
                            } else {
                                System.out.println("drop what? drop it like its hot????? please type it again with more specificity....");
                            }
                        }
                    } catch (Exception e) {
                        // System.out.println(e);
                        System.out.println("what do you want to drop??? smh players like you never specify...");
                    }
                    
                    break;
                case "u":
                case "use":
                    try {
                        switch (userInputParsing[1].toLowerCase()) {
                        case "mints":
                            if (inventory.contains(mints) == false){
                                System.out.println("You can't use something you don't have....");
                            }
                            else{
                                if ((CoordsysArray[xPos][yPos].getCharacterId() == 2) || (CoordsysArray[xPos][yPos].getCharacterId() == 7)){
                                    inventory.remove(mints);
                                    System.out.println("Your mints were confiscated to alleviate the effects of bad breath...");
                                } else {
                                    inventory.remove(mints);
                                    System.out.println("your breath now smells marginally better.... i wonder what else you could have used these for...");
                                }
                            }
                            break;
                        case "painting":
                            if (inventory.contains(painting) == false){
                                System.out.println("You can't use something you don't have....");
                            }
                            else{
                                if (CoordsysArray[xPos][yPos].getCharacterId() == 3){
                                    inventory.remove(painting);
                                    System.out.println("The art collector took your painting as payment for further passage.");
                                } else {
                                    System.out.println("Can you really use the painting here??? In the middle of nowhere??? You must be crazy...");
                                }
                            }
                            break;
                        case "sword":
                            if (inventory.contains(sword) == false){
                                System.out.println("You can't use something you don't have....");
                            }
                            else{
                                if (CoordsysArray[xPos][yPos].getCharacterId() != 0){
                                    if (CoordsysArray[xPos][yPos].getCharacterId() == 6){
                                        inventory.remove(sword);
                                        inventory.add(torch);
                                        System.out.println("The RABID RABBIT gave you a TORCH in exchange for the SWORD..."); 
                                            //rabid rabbit
                                    }else{
                                    System.out.println("you tried to attack... but it failed, thanks to your horrible sword skills");
                                    }
                                } else {
                                    System.out.println("Can't use the sword in this game! Supposedly this game features non-violence...");
                                }
                            }
                            break;
                        case "sack":
                            if (inventory.contains(sack) == false){
                                System.out.println("You can't use something you don't have....");
                            }
                            else{
                                if (CoordsysArray[xPos][yPos].getItemId() == 7){
                                    CoordsysArray[xPos][yPos].setItemId(0);
                                    sack.setItemName("SACK");
                                    sack.setThingsContainedWithin(sack.getThingsContainedWithin() + 1);
                                    System.out.println("You pick up the gold, filling up your SACK. It now contains some gold inside.");
                                }
                                else{
                                System.out.println("You try to use the sack by opening up the sack and wishing there were presents in there from Santa, but you've been too naughty this year... ");
                                }
                            }
                            break;
                        case "armor":
                            if (inventory.contains(armor) == false){
                                    System.out.println("You can't use something you don't have....");
                                }
                            else{
                                if (CoordsysArray[xPos][yPos].getCharacterId() == 4){
                                    inventory.remove(armor);
                                    System.out.println("NOWHERE the GOD took your armor as payment for screwing up your life...");
                                } else {
                                    System.out.println("use armor??? but theres nothing to protect yourself from...");
                                }
                            }
                            break;
                        case "key":
                            if (inventory.contains(key) != true){
                                    System.out.println("You can't use something you don't have....");
                                }
                            else{
                                if ((xPos == 3) && (yPos == 5)) {
                                    inventory.remove(key);
                                    System.out.println("The key opened the door... but now its stuck there...");
                                    CoordsysArray[xPos+1][yPos].setAccessibleFromWest(true);;
                                    CoordsysArray[xPos][yPos].setAccessibleFromEast(true);;
                                } else {
                                    System.out.println("Now, I wonder what do you use a key on... is it not obvious???? A locked door perhaps???");
                                }
                            }
                            break;
                        case "gold":
                            if (sack.getThingsContainedWithin() == 0){
                                    System.out.println("You can't use something you don't have....");
                                }
                            else
                                if (CoordsysArray[xPos][yPos].getCharacterId() == 4){
                                    sack.setThingsContainedWithin(0);
                                    System.out.println("NOWHERE the GOD took your gold as payment for screwing up your life... your sack no longer contains gold inside...");
                                } else {
                                    System.out.println("u cannot use the gold here... u can only give it up as payment...");
                                }                            
                            break;
                        case "flippers":
                            if (inventory.contains(flippers) == false){
                                    System.out.println("You can't use something you don't have....");
                            }
                            else if (CoordsysArray[xPos][yPos].getGeneralLocation() == "THE LAKE"){
                                System.out.println("u tried swimming, but the lake is too disgusting for you to sink your godly body into...");
                            }
                            else{
                                System.out.println("cannot use flippers in a non-watery or non-calm environment...");
                            }
                            break;
                        case "token":
                            if (inventory.contains(token) == false){
                                    System.out.println("You can't use something you don't have....");
                                }
                            else if (CoordsysArray[xPos][yPos].getCharacterId() == 5){
                                System.out.println("THE FERRYMAN IS TAKING YOU TO THE UNDERWORLD! FEAR YOUR IMMENENT DEMISE.");
                                gameLoop = false;
                            } else {
                                System.out.println("You look at the token and it has a picture of a boat on it... you probably can't use it here in the middle of nowhere then...");
                            }
                            break;
                        case "bucket":
                            if (inventory.contains(bucket) == false){
                                    System.out.println("You can't use something you don't have....");
                                }
                            else if ((CoordsysArray[xPos][yPos].getCharacterId() == 8)){
                                CoordsysArray[xPos][yPos].setCharacterId(0);
                                bucket.setThingsContainedWithin(bucket.getThingsContainedWithin() + 1);
                                System.out.println("Picked up a PYTHON with the BUCKET! Seems like the lil fella slithered in...");
                            }
                            else{
                                System.out.println("you can't use the snake BUCKET here...");
                            }
                            break;
                        case "runes":
                            if (inventory.contains(runes) == false){
                                    System.out.println("You can't use something you don't have....");
                            }
                            else if (CoordsysArray[xPos][yPos].getCharacterId() == 1){
                                System.out.println("The IMPOSING STATUE awoke! It uttered a few words: \"You need to cool down the fire of the Dragons... or else face my fate of stone...\"");
                            }
                            else{
                                System.out.println("you can't use the RUNES here... maybe use it on an unimposing statue....?");
                            }
                            break;
                        case "coin":
                            if ((inventory.contains(coin1)) && (inventory.contains(coin2)) && (inventory.contains(coin3)) == false){
                                    System.out.println("You can't use something you don't have....");
                                }
                            else if (CoordsysArray[xPos][yPos].getCharacterId() == 9){
                                if (inventory.contains(coin1)){
                                    inventory.remove(coin1);
                                }
                                else{
                                    if (inventory.contains(coin2)){
                                        inventory.remove(coin2);
                                    }
                                    else{
                                        inventory.remove(coin3);
                                    }
                                }
                                System.out.println("inserted a coin! got a mint back in return...");
                                inventory.add(mints);
                            }else{
                                System.out.println("Cannot use coins here... it seems as if they aren't accepted as currency here...");
                            }
                            break;
                        default:
                            break;
                    }
                    } catch (Exception e) {
                        System.out.println("Use what???? are you using me in this relationship????? you are a mean player and I would never date you...");
                    }
                    
                    break;
                
                // case "use item":
                // case "u item":
                // case "use ITEM":
                // case "USE ITEM":
                //     if (inventory.contains(item) == false){
                //             System.out.println("You can't use something you don't have....");
                //         }
                //     else{

                //     }
                //     break;
                case "h":
                case "help":
                    System.out.println("Enter N, S, E, W for directions. \nI for inventory \nEG for exiting the game \nT for picking up an item \nD <item name here> for dropping an item.\nItems limited to one per square. \nEnjoy!");
                    break;
                case "l":
                case "look":
                case "see":
                case "view":
                    if (CoordsysArray[xPos][yPos + 1].isAccessibleFromSouth() == true){
                        System.out.print(CoordsysArray[xPos][yPos + 1].getUserLookPrompt() + " to the north.");
                    }else if (CoordsysArray[xPos][yPos - 1].isAccessibleFromNorth() == true){
                        System.out.print(CoordsysArray[xPos][yPos - 1].getUserLookPrompt() + " to the south.");
                    }else if (CoordsysArray[xPos + 1][yPos].isAccessibleFromWest() == true){
                        System.out.print(CoordsysArray[xPos + 1][yPos].getUserLookPrompt() + " to the east.");
                    }else if (CoordsysArray[xPos -1][yPos].isAccessibleFromEast() == true){
                        System.out.print(CoordsysArray[xPos - 1][yPos].getUserLookPrompt() + " to the west.");
                    }else{
                        System.out.println("There is nothing to see in all directions... perhaps you are trapped forever...");
                    }
                    System.out.println();
                    break;
                case "i":
                case "inventory":
                case "backpack":
                case "storage":
                    //NEED TO FIX loop through arraylist
                    index = 1;
                    for (Item item : inventory) {
                        System.out.println(index + ". " + item.getItemName());
                        index += 1;
                    }
                    break;
                //exit game
                case "exit game":
                case "eg":
                    gameLoop = false;
                    break;
                //Snark the user outta here
                default:
                    System.out.println("I cannot tell with your snarky attitude. Please try again...");
                    break;
            }
            promptForCoord = "\n" + CoordsysArray[xPos][yPos].getGeneralLocation();
            // CoordsysArray[13][2].setChanceOfDeath(2);
            // CoordsysArray[13][2].setDeathString("hello there death");
            // System.out.println(CoordsysArray[xPos][yPos].getChanceOfDeath());
            if (CoordsysArray[xPos][yPos].getChanceOfDeath() == 0){
                continue;
            }
            else{
                if (rand.nextInt(CoordsysArray[xPos][yPos].getChanceOfDeath()) != 0){
                    System.out.println(CoordsysArray[xPos][yPos].getDeathString());
                    gameLoop = false;
                }
            }
        }while(gameLoop == true);
        //close scanner to prevent memory leaks
        userInputScanner.close();

    }
}